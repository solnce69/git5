template <typename T>
class Stack
{
private:
	T* _stack;
	unsigned _size;
public:
	Stack()
	{
		_size = 0;
		_stack = nullptr;
	}
	bool IsEmpty()
	{
		return _size == 0;
	}
	T Head()
	{
		return _stack[_size - 1];
	}
	void push(T st)
	{
		T* tmp = new T[_size + 1];
		for (int i = 0; i < _size; i++) {
			tmp[i] = _stack[i];
		}
		tmp[_size] = st;
		delete[] _stack;
		_stack = tmp;
		tmp = nullptr;
		_size++;
	}
	T pop()
	{
		if (_size == 0) {
			T *p;
			p = nullptr;
			return (*p);
		}
		T st;
		st = _stack[_size - 1];
		T* tmp = new T[_size - 1];
		for (int i = 0; i < _size - 1; i++) {
			tmp[i] = _stack[i];
		}
		delete[] _stack;
		_stack = tmp;
		tmp = nullptr;
		_size--;
		return st;
	}
	~Stack()
	{
		if (_size > 0)
			delete[] _stack;
	}
};
template<typename T>
class List
{
public:
	List();
	~List();

	//удаление первого элемента в списке
	void pop_front();

	//добавление элемента в конец списка
	void push_back(T data);

	// очистить список
	void clear();

	// получить количество елементов в списке
	int GetSize() { return Size; }

	// перегруженный оператор [] 
	T& operator[](const int index);

	//добавление элемента в начало списка
	void push_front(T data);

	//добавление элемента в список по указанному индексу
	void insert(T data, int index);

	//удаление элемента в списке по указанному индексу
	void removeAt(int index);

	//удаление последнего элемента в списке
	void pop_back();

private:
	template<typename T>
	class Node
	{
	public:
		Node * pNext;
		T data;
		Node(T data = T(), Node *pNext = nullptr)
		{
			this->data = data;
			this->pNext = pNext;
		}
	};
	int Size;
	Node<T> *head;
};

template<typename T>
List<T>::List()
{
	Size = 0;
	head = nullptr;
}

template<typename T>
List<T>::~List()
{
	clear();
}

template<typename T>
void List<T>::pop_front()
{
	Node<T> *temp = head;
	head = head->pNext;
	delete temp;
	Size--;

}

template<typename T>
void List<T>::push_back(T data)
{
	if (head == nullptr)
	{
		head = new Node<T>(data);
	}
	else
	{
		Node<T> *current = this->head;
		while (current->pNext != nullptr)
		{
			current = current->pNext;
		}
		current->pNext = new Node<T>(data);

	}

	Size++;
}

template<typename T>
void List<T>::clear()
{
	while (Size)
	{
		pop_front();
	}
}

template<typename T>
T & List<T>::operator[](const int index)
{
	int counter = 0;
	Node<T> *current = this->head;
	while (current != nullptr)
	{
		if (counter == index)
		{
			return current->data;
		}
		current = current->pNext;
		counter++;
	}
}

template<typename T>
void List<T>::push_front(T data)
{
	head = new Node<T>(data, head);
	Size++;
}

template<typename T>
void List<T>::insert(T data, int index)
{

	if (index == 0)
	{
		push_front(data);
	}
	else
	{
		Node<T> *previous = this->head;
		for (int i = 0; i < index - 1; i++)
		{
			previous = previous->pNext;
		}

		Node<T> *newNode = new Node<T>(data, previous->pNext);
		previous->pNext = newNode;
		Size++;
	}
}

template<typename T>
void List<T>::removeAt(int index)
{
	if (index == 0)
	{
		pop_front();
	}
	else
	{
		Node<T> *previous = this->head;
		for (int i = 0; i < index - 1; i++)
		{
			previous = previous->pNext;
		}
		Node<T> *toDelete = previous->pNext;
		previous->pNext = toDelete->pNext;
		delete toDelete;
		Size--;
	}
}

template<typename T>
void List<T>::pop_back()
{
	removeAt(Size - 1);
}

template<class T>
class Queue {
public:
	Queue() {
		List<T> _queue;
	}
	void push(T value) {
		_queue.push_back(value);
	}
	void pop() {
		_queue.pop_front();
	}
	T top() {
		return _queue[0];
	}
	bool is_empty() {
		return !(_queue.GetSize());
	}
	~Queue() {
		_queue.clear();
	}
private:
	List<T> _queue;
};
